representation: ???
add_special_tokens: False
special_tokens:
  {
    "unk_token": "[UNK]",
    "pad_token": "[PAD]",
    "cls_token": "[CLS]",
    "sep_token": "[SEP]",
    "mask_token": "[MASK]",
    "eos_token": "[EOS]",
    "bos_token": "[BOS]",
  }

REPRESENTATION_MAP: { "cif_p1": "cif_p1", "Slice": "slice" }

PROPERTY_MAP:
  {
    "matbench_log_gvrh": "shear modulus (in GPa)",
    "matbench_log_kvrh": "bulk modulus (in GPa)",
    "matbench_dielectric": "refractive index",
    "matbench_perovskites": "formation energy (in eV)",
  }

MATERIAL_MAP:
  {
    "matbench_log_gvrh": "material",
    "matbench_log_kvrh": "material",
    "matbench_dielectric": "dielectric material",
    "matbench_perovskites": "perovskite material",
  }

logging:
  wandb_project: ???
  wandb_log_model: "checkpoint"

finetune:
  model_name: ???
  freeze_base_model: False
  dataset_name: "matbench_log_gvrh"
  exp_name: ["train_${model.representation}_${model.finetune.dataset_name}_0"]

  path:
    pretrained_checkpoint: ???

    finetune_data_rootpath: "/work/so87pot/material_db/all_1" # <--- Change this to the path of the finetune data
    finetune_traindata:
      [
        "${model.finetune.path.finetune_data_rootpath}/train_${model.finetune.dataset_name}_0.json",
      ]

    finetune_testdata:
      [
        "${model.finetune.path.finetune_data_rootpath}/test_${model.finetune.dataset_name}_0.json",
      ]
    root_path: "/work/so87pot/mattext/magaloop3/${model.finetune.model_name}" # <--- Change this to the path where chkpoints and logs will be saved
    output_dir: "${model.finetune.path.root_path}/checkpoints/${model.finetune.exp_name}"
    logging_dir: "${model.finetune.path.root_path}/logs/${model.finetune.exp_name}"
    finetuned_modelname: "${model.finetune.path.root_path}/checkpoints/finetuned_${model.finetune.exp_name}"

  context_length: 1024
  callbacks:
    early_stopping: True
    custom_logger: False
    early_stopping_patience: 3
    early_stopping_threshold: 0.001
    generation:
      n_epochs: 1
      output_dir: "${model.finetune.path.output_dir}"

  bnb_config:
    use_4bit: True
    use_8bit: False
    bnb_4bit_compute_dtype: "float16"
    bnb_4bit_quant_type: "nf4"
    use_nested_quant: False

  lora_config:
    r: 16
    lora_alpha: 32
    lora_dropout: 0.2
    bias: "none"
    task_type: "CAUSAL_LM"
    #target_modules: ['q_proj', 'o_proj', 'gate_proj', 'up_proj', 'down_proj', 'k_proj', 'v_proj'] # Choose all linear layers from the model

  training_arguments:
    output_dir: "${model.finetune.path.output_dir}"
    bf16: True
    fp16: False
    overwrite_output_dir: True
    dataloader_num_workers: 2
    num_train_epochs: 40
    per_device_train_batch_size: 32
    per_device_eval_batch_size: 16
    save_strategy: "steps"
    do_eval: True
    evaluation_strategy: "steps"
    logging_strategy: "steps"
    logging_first_step: True
    save_steps: 20 # Number of epochs before saving
    report_to: "wandb"
    save_total_limit: 3
    logging_steps: 5
    eval_steps: 20
    seed: 42
    load_best_model_at_end: True
    # Number of update steps to accumulate the gradients for
    gradient_accumulation_steps: 4
    # Enable gradient checkpointing
    gradient_checkpointing: True
    # Maximum gradient normal (gradient clipping)
    max_grad_norm: 0.3
    # Initial learning rate (AdamW optimizer)
    learning_rate: 1e-4 # 0.0005 crystal-llm
    # Weight decay to apply to all layers except bias/LayerNorm weights
    weight_decay: 0.001
    # Optimizer to use
    optim: "paged_adamw_32bit"
    # Learning rate schedule
    lr_scheduler_type: "cosine"
    # Ratio of steps for a linear warmup (from 0 to learning rate)
    warmup_ratio: 0.03
    eval_accumulation_steps: 2
    group_by_length: True
